package main

import "fmt"

func test1(x1 *int, x2 *int) int {
	return *x1 * *x2
}

func test2(x1 *int, x2 *int) {
	a := *x1
	b := *x2
	tmp := a
	*x1 = b
	*x2 = tmp
	fmt.Print(*x1)
	fmt.Print(" ")
	fmt.Print(*x2)
}

func main() {
	var a, b int
	a = 2
	b = 3
	x1 := &a
	x2 := &b
	res := test1(x1, x2)

	test2(x1, x2)

	fmt.Println(res)
}

/**
Одна из фундаментальных концепций, которая используется неявно в программировании, - это стек.
Стек - это линейная область памяти, у которой есть указатель на самые последние добавленные в него данные.
Когда данные добавляют в стек, они записываются за указателем, а указатель изменяется так, чтобы он указывал на самые
последние добавленные данные. Когда данные из стека нужно удалить, указатель сдвигают в обратную сторону.
При необходимости вызвать какую-нибудь функцию, в стек кладутся её аргументы.
После работы функция обычно удаляет из стека свои аргументы и кладёт в стек результаты своей работы.
Благодаря стеку функция может вызывать сама себя и другие функции, так что данные каждого вызова содержатся в
стеке и аргументы каждого вызова функции не смешиваются с аргументами других вызовов этой и других функций.
А теперь представьте, что эти функции должны обрабатывать какой-то большой объём данных.
В стек будут копироваться одни и те же данные при каждом вызове функции. Чтобы не копировать их,
в стек кладётся указатель на эти данные и функция работает с данными по указателю.
Но самое важное применение указателей заключается в том, что только с их помощью можно создавать в оперативной памяти
сложные динамические структуры данных: списки, деревья, хэш-таблицы. В языках со сборщиками мусора вместо указателей
обычно используются ссылки, а не указатели как таковые. Сборщик мусора ведёт учёт количества активных ссылок на объект
в памяти и освобождает память, занимаемую объектом, если на этот объект больше нет ссылок. Если сейчас вам кажется,
что указатели и ссылки - это бесполезная и излишняя сущность вроде троллейбуса из буханки хлеба, то это лишь потому,
что вы пока недостаточно знаете. Без указателей и ссылок по-настоящему серьёзные программы написать невозможно,
это одна из краеугольных концепций, без понимания которой в программировании стать профессионалом попросту невозможно.

https://www.youtube.com/playlist?list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_
*/
